import { NextRequest, NextResponse } from 'next/server';
import { kv } from '@vercel/kv';
import { getSession } from '@/lib/auth';
export const runtime = 'nodejs';
function calc(cart:any){ cart.subtotal = cart.items.reduce((s:number,it:any)=> s + it.price*it.qty, 0); return cart; }
export async function GET(){ const session = await getSession(); if (!session) return NextResponse.json({ items: [], subtotal: 0 }); const key = `cart:${session.userId}`; const cart = (await kv.get<any>(key)) ?? { userId: session.userId, items: [], subtotal: 0 }; return NextResponse.json(calc(cart)); }
export async function POST(req: NextRequest){ const session = await getSession(); if (!session) return NextResponse.json({ error:'Unauthorized' }, { status: 401 }); const { productId, qty } = await req.json(); const product = await kv.hgetall<any>(`product:${productId}`); if (!product) return NextResponse.json({ error:'Not found' }, { status: 404 }); const key = `cart:${session.userId}`; const cart = (await kv.get<any>(key)) ?? { userId: session.userId, items: [], subtotal: 0 }; const idx = cart.items.findIndex((i:any)=>i.productId===productId); if (idx>=0) cart.items[idx].qty = qty; else cart.items.push({ productId, name: product.name, price: product.price, qty }); await kv.set(key, calc(cart)); return NextResponse.json(cart); }
export async function DELETE(req: NextRequest){ const session = await getSession(); if (!session) return NextResponse.json({ error:'Unauthorized' }, { status: 401 }); const { productId } = await req.json(); const key = `cart:${session.userId}`; const cart = (await kv.get<any>(key)) ?? { userId: session.userId, items: [], subtotal: 0 }; cart.items = cart.items.filter((i:any)=>i.productId!==productId); await kv.set(key, calc(cart)); return NextResponse.json(cart); }
